name: ci
on:
  push:
    branches:
      - master
      - try
  pull_request:
jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: false
      - uses: ./.github/actions/setup-nix
        with:
          cachix-signing-key: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: parse
        run: nix-instantiate --json --parse ./**/*.nix
      - name: lints
        run: |
          nix build -L --keep-going \
            .\#checks.x86_64-linux.pre-commit-check

  get-hosts:
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
      systems: ${{ steps.get-hosts.outputs.systems }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: false
      - uses: ./.github/actions/setup-nix
        with:
          cachix: false
      - id: get-hosts
        run: |
          TMP="$(mktemp -d)"
          nix eval --json -f ./nix/hosts.nix all | jq -c '
            to_entries
            | map({name: .key} + .value)
            | map_values(
                if .hostPlatform  == "x86_64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "aarch64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "x86_64-darwin" then . + {ghSystem: "macos-latest"}
                else . + {ghSystem: null} end)
            | map(select(.ghSystem != null))
          ' > "$TMP/hosts.json"

          # shellcheck disable=SC2002
          cat "$TMP/hosts.json" | jq -c '
            map({hostPlatform, ghSystem})
            | unique_by(.hostPlatform)
            | sort_by(.ghSystem)
          ' > "$TMP/systems.json"

          echo "hosts=$(cat "$TMP/hosts.json")" >> "$GITHUB_OUTPUT"
          echo "systems=$(cat "$TMP/systems.json")" >> "$GITHUB_OUTPUT"

  build-shell:
    name: build-shell (${{ matrix.system.hostPlatform }})
    runs-on: ${{ matrix.system.ghSystem }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        system: ${{ fromJson(needs.get-hosts.outputs.systems) }}
    steps:
      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.system.hostPlatform == "aarch64-linux" }}
      - uses: actions/checkout@v3
        with:
          lfs: false
      - uses: ./.github/actions/setup-nix
        with:
          cachix-signing-key: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: build-shell
        run: |
          nix run nixpkgs\#nix-build-uncached -- \
            --keep-going \
            -build-flags '--extra-platforms "aarch64-linux i686-linux" --extra-trusted-substituters "https://staging.attic.rs/attic-ci" --extra-trusted-public-keys "attic-ci:U5Sey4mUxwBXM3iFapmP0/ogODXywKLRNgRPQpEXxbo="' \
            -A "devShells.${{ matrix.system.hostPlatform }}.default.inputDerivation"

  build-host:
    name: build-${{ matrix.host.name }}
    runs-on: ${{ matrix.host.ghSystem }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.host.name == 'pixel6' }}
      - uses: actions/checkout@v3
        with:
          lfs: false
      - uses: ./.github/actions/setup-nix
        with:
          cachix-signing-key: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: build-host
        run: |
          nix run nixpkgs#nix-build-uncached -- \
            --keep-going \
            -build-flags '--extra-platforms "aarch64-linux i686-linux" --extra-trusted-substituters "https://staging.attic.rs/attic-ci" --extra-trusted-public-keys "attic-ci:U5Sey4mUxwBXM3iFapmP0/ogODXywKLRNgRPQpEXxbo="' \
            -A packages.${{ matrix.host.hostPlatform }}.${{ matrix.host.name }}

  check:
    runs-on: ubuntu-latest
    needs: [ lints, build-host, build-shell ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
