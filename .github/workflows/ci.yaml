name: ci
on:
  push:
    branches:
      - master
      - try
  pull_request:
jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v12
        with:
          name: bbigras-nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          extraPullNames: "dendrite-demo-pinecone,nix-community,nix-on-droid,pre-commit-hooks"
      - name: parse
        run: nix-instantiate --json --parse ./**/*.nix
      - name: lints
        run: |
          cachix watch-exec bbigras-nix-config -- \
            nix build -L --keep-going \
            .\#checks.x86_64-linux.pre-commit-check

  get-hosts:
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
      systems: ${{ steps.get-hosts.outputs.systems }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
      - id: get-hosts
        run: |
          nix eval --json -f ./nix/hosts.nix all | jq -c '
          map_values(
              if .hostPlatform  == "x86_64-linux" then "ubuntu-latest"
              elif .hostPlatform == "aarch64-linux" then "ubuntu-latest"
              elif .hostPlatform == "x86_64-darwin" then "macos-latest"
              else null end)
          | to_entries
          | map(select(.value != null))
          | map({ "name": .key, "system": .value })
          ' > hosts.json

          jq -c 'map(.system) | unique | sort' hosts.json > systems.json

          echo "hosts=$(cat hosts.json)" >> "$GITHUB_OUTPUT"
          echo "systems=$(cat systems.json)" >> "$GITHUB_OUTPUT"

  build-shell:
    runs-on: ${{ matrix.system }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        system: ${{ fromJson(needs.get-hosts.outputs.systems) }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v12
        with:
          name: bbigras-nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          extraPullNames: "dendrite-demo-pinecone,nix-community,nix-on-droid,pre-commit-hooks"
      - name: build-shell
        run: |
          SYSTEM="$(nix eval --impure --expr 'builtins.currentSystem')"
          cachix watch-exec bbigras-nix-config -- \
            nix run nixpkgs\#nix-build-uncached -- \
              --keep-going \
              -A "devShells.$SYSTEM.default.inputDerivation"

  build-host:
    name: build-${{ matrix.host.name }}
    runs-on: ${{ matrix.host.system }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.host.name == 'pixel6' }}
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v12
        with:
          name: bbigras-nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          extraPullNames: "dendrite-demo-pinecone,nix-community,nix-on-droid,pre-commit-hooks"
      - name: build-host
        uses: nick-invision/retry@v2
        with:
          max_attempts: 2
          timeout_minutes: 720
          retry_on: error
          command: |
            cachix watch-exec bbigras-nix-config -- \
              nix run nixpkgs#nix-build-uncached -- \
                --keep-going \
                -build-flags '--extra-platforms "aarch64-linux i686-linux"' \
                -A packages.x86_64-linux.all.${{ matrix.host.name }}

  check:
    runs-on: ubuntu-latest
    needs: [ build-host, build-shell ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
